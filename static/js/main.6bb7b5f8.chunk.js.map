{"version":3,"sources":["card.js","cardlist.js","search.js","App.js","serviceWorker.js","index.js"],"names":["Cards","name","email","Container","Card","id","border","style","width","className","Img","variant","src","borderTopLeftRadius","borderTopRightRadius","Body","Title","Text","Cardlist","users","Row","map","user","i","key","search","searchChange","Form","type","placeholder","onChange","App","useState","searchtxt","setsearchtxt","setusers","fetch","then","response","json","filterfriend","filter","robot","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8PAmBeA,EAhBD,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACnB,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,GAAG,OAAOC,OAAO,IAAIC,MAAO,CAAEC,MAAO,SAAWC,UAAU,eAC5D,kBAACL,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMC,IAAG,8CAAyCX,EAAzC,QAAqDM,MAAO,CAAEM,oBAAqB,OAAQC,qBAAsB,UAC5I,kBAACV,EAAA,EAAKW,KAAN,KACI,kBAACX,EAAA,EAAKY,MAAN,KAAaf,GACb,kBAACG,EAAA,EAAKa,KAAN,KAAYf,Q,QCIrBgB,MAZf,YAA8B,IAAVC,EAAS,EAATA,MAChB,OACI,yBAAKV,UAAU,QACX,kBAACW,EAAA,EAAD,CAAKX,UAAU,6BACVU,EAAME,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CAAOC,IAAKL,EAAMI,GAAGlB,GAAIJ,KAAMkB,EAAMI,GAAGtB,KAAMC,MAAOiB,EAAMI,GAAGrB,c,QCK1EuB,MAVf,YAAmC,IAAjBC,EAAgB,EAAhBA,aACd,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMlB,UAAU,aACZ,2BAAOmB,KAAK,SAASC,YAAY,SAASpB,UAAU,UAAUqB,SAAUJ,OCqCzEK,MAhCf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEaF,mBAAS,IAFtB,mBAENb,EAFM,KAECgB,EAFD,KAObC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAf,GAAUa,EAASb,MAE3B,IAAMkB,EAAerB,EAAMsB,QAAO,SAAAC,GAChC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASX,EAAUU,kBAErD,OACE,yBAAKlC,UAAU,yBACb,wBAAIJ,GAAG,SAAP,iBACA,yBAAKI,UAAU,oBACb,kBAAC,EAAD,CAAQiB,aAdd,SAAwBmB,GACtBX,EAAaW,EAAMC,OAAOC,WAgBxB,yBAAKtC,UAAU,QACb,kBAAC,EAAD,CAAUU,MAAOqB,KAEnB,4BAAQ/B,UAAU,UAChB,yECzBYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK9C,UAAU,aACb,kBAAC,EAAD,QAGJ+C,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6bb7b5f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Card, } from 'react-bootstrap';\r\n\r\nconst Cards = ({ name, email }) => {\r\n    return (\r\n        <div>\r\n            <Container >\r\n                <Card id=\"card\" border=\"0\" style={{ width: '12rem' }} className=\"text-center\">\r\n                    <Card.Img variant=\"top\" src={`https://api.adorable.io/avatars/300/${name}.png`} style={{ borderTopLeftRadius: '15px', borderTopRightRadius: \"15px\" }} />\r\n                    <Card.Body>\r\n                        <Card.Title>{name}</Card.Title>\r\n                        <Card.Text>{email}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import React from 'react';\r\nimport Cards from './card';\r\nimport { Row } from \"react-bootstrap\"\r\nfunction Cardlist({ users }) {\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <Row className=\"justify-content-md-center\">\r\n                {users.map((user, i) => {\r\n                    return <Cards key={users[i].id} name={users[i].name} email={users[i].email} />\r\n                })}\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nfunction search({ searchChange }) {\r\n    return (\r\n        <div>\r\n            <Form className=\"mb-3 mr-3\">\r\n                <input type=\"search\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={searchChange} />\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default search;","import React, { useState } from 'react';\nimport './App.css';\nimport Cardlist from './cardlist';\n// import Insert from './insert';\nimport Search from './search';\n\n// function onInsert(event) {\n//   console.log(\"Insert: \" + event.target.value);\n// }\n\n\n\nfunction App() {\n  const [searchtxt, setsearchtxt] = useState(\"\");\n  const [users, setusers] = useState([]);\n\n  function onSearchChange(event) {\n    setsearchtxt(event.target.value);\n  }\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(user => { setusers(user) })\n\n  const filterfriend = users.filter(robot => {\n    return robot.name.toLowerCase().includes(searchtxt.toLowerCase())\n  })\n  return (\n    <div className=\"text-center container\" >\n      <h1 id=\"title\">Adora Friends</h1>\n      <div className=\"mt-4 text-center\">\n        <Search searchChange={onSearchChange} />\n        {/* <Insert insertchange={onInsert} /> */}\n      </div>\n      <div className=\"list\">\n        <Cardlist users={filterfriend} />\n      </div>\n      <footer className=\"footer\">\n        <p>&reg; Developed by Mahyarmadad &copy; 2020</p>\n      </footer>\n    </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"container\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}